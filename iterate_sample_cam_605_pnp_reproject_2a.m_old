% use known observations from   /mnt/nixbig/ownCloud/project_code/the_obvious_2.m
addpath('/mnt/nixbig/ownCloud/project_code'); 
addpath('/mnt/nixbig/ownCloud/project_AA1__1_1/code/mutliview_pose_estimation/src/main/matlab/camera_pose_from_known_3D_point_features_PnP/')

cam_605_good = [...
    0.887598151824310  -1.97885166499638  0.957895776523009  -0.0318571289684177  0.187864426800859  0.248082165295458  0.949814360672122
    ];
world_to_camera_good_rotm =  quat2rotm( [ cam_605_good(1,7) , cam_605_good(1,4:6) ] );
world_to_camera_good_trans = cam_605_good(1,1:3)';
world_to_camera_good_ = [  ...
    [world_to_camera_good_rotm , world_to_camera_good_trans]  ;
    0 0 0 1 ] 

FLU_basis_vectors = eye(4);   
T_FLU_to_RDF = [ ...
     0    -1     0     0
     0     0    -1     0
     1     0     0     0
     0     0     0     1   ] ;
RDF_basis_vectors = FLU_basis_vectors * T_FLU_to_RDF;

camera_K = [...
   322.9596901156589 , 000.0000000000000 , 176.8267919600727 ; %,    //  f_x ,   0 , c_x
                000.0000000000000 , 323.8523693059909 , 146.7681514313797 ; %,    //    0 , f_y , c_y
                  0.0 ,               0.0 ,               1.0 ];            
camera_K_hom_RDF = [ camera_K , [ 0 0 0 ]'  ] ;
% use points from  /mnt/nixbig/ownCloud/project_code/the_obvious_2.m

points_2D_reported = [ ... 
                     177.5                       126                         ;
          285.153230038553                       126                         ;
           69.846769961447                       126                         ;
                     177.5          233.950789768664                         ;
                     177.5          18.0492102313364                         ;
                     177.5          72.0246051156682                         ;
                     177.5          90.0164034104454                         ;
                     177.5          54.0328068208909                         ;
                     177.5          99.0123025578341                         ;
         ]'  ;
fig_h_points_2D_reported = figure3('points_2D_reported 1');
set(gca,'Ydir','reverse')
plot2_rows(points_2D_reported,'rx');

points_3D_reported_world_FLU =  [...
       3.306571330254921  -0.600968573289851  -0.160141319293836  1 ;
   3.789804979249789  -1.475849298482264  -0.192836229691356   1;
   2.823337681260053   0.273912151902562  -0.127446408896316   1;
   2.965505040454299  -0.754696918023319  -1.087525480247185   1;
   3.647637620055542  -0.447240228556383   0.767242841659513   1;
   6.066610798486153   0.930642863150146  -0.350794254157333   1;
   8.485583976916763   2.308525954856676  -1.468831349974178   1;
   8.826650266717385   2.462254299590144  -0.541447189020829   1;
  10.904557155347375   3.686409046563205  -2.586868445791023   1;
]' ;

fig_h_points_3D_reported_world_FLU = figure3('points_3D_reported_world_FLU 1');
plot3_rows(points_3D_reported_world_FLU,'rx');
% draw_axes_direct_c(world_to_camera_good_rotm, world_to_camera_good_trans, 'world_to_camera_good', 1, 'k')

num_iternations = 1; ii_ = 1;
estimates = zeros(num_iternations,3);
err = zeros(num_iternations,1);
size(points_2D_reported)
world_to_camera_rotm_hist = zeros(num_iternations, 3, 3);
world_to_camera_trans_hist = zeros(num_iternations, 3, 1);
reprojected_errs = zeros(num_iternations, size(points_2D_reported,1), size(points_2D_reported,2));
reprojected_errs_bad = zeros(num_iternations, size(points_2D_reported,2));
for ii_ = 1:num_iternations 
   %-- estimation 
    [aa , bb , cc  , world_to_camera_est_FLU, world_to_local_FLU,  est_rotm_FLU] = func_cam_605_select_points_input_2a( camera_K , points_2D_reported , points_3D_reported_world_FLU(1:3,:)  );
    display('--------------------------------')
    display(world_to_camera_est_FLU)
    draw_axes_direct(world_to_camera_est_FLU(1:3,1:3), world_to_camera_est_FLU(1:3,4)+0.2 , '', 1.2 )
    draw_axes_direct_c(world_to_camera_est_FLU(1:3,1:3), world_to_camera_est_FLU(1:3,4)+0.2 , 'world_to_camera_est_FLU', 0.6 , 'm')
%     draw_axes_direct(world_to_camera_est_FLU(1:3,1:3) * T_FLU_to_RDF(1:3,1:3), world_to_camera_est_FLU(1:3,4)+0.2 , '', 1.2 )
%     draw_axes_direct_c(world_to_camera_est_FLU(1:3,1:3) * T_FLU_to_RDF(1:3,1:3), world_to_camera_est_FLU(1:3,4)+0.2 , strrep('world_to_camera_est_FLU','_','\_'), 0.6 , 'c')
    display(world_to_local_FLU)
    display(est_rotm_FLU)
    display(world_to_local_FLU*T_FLU_to_RDF')
    display(quat2rotm( [ cam_605_good(1,7) , cam_605_good(1,4:6) ] ) )
    display('--------------------------------')
    
    estimates(ii_,:) = [aa bb cc];
    err(ii_) = sqrt(sum(([0.887598151824310  -1.97885166499638  0.957895776523009] -  [aa bb cc] ).^2));        
    err
    %-- reprojection                    
     
%      Basic form to convert from RDF to FLU is 
%      transform_RDF  *  T_FLU_to_RDF
%      e.g.
%      [  [ est_rotm_rdf , [ 0 0 0 ]' ] ;  [ 0 0 0 1 ] ] * T_FLU_to_RDF
%      
%      Basic form to convert from FLU to RDF is 
%      transform_FLU  *  inv(T_FLU_to_RDF)
%      e.g.
%      rot_flu_maybe * T_FLU_to_RDF(1:3,1:3)'
%       i.e.  T_RDF_to_FLU = inv(T_FLU_to_RDF)  --> rot_flu_maybe * T_RDF_to_FLU(1:3,1:3)
%
% Position:
% point_3D_RDF = T_FLU_to_RDF * point_3D_FLU  e.g. T_FLU_to_RDF * [ 1 1 1  1]'  
% OR
% point_3D_RDF = point_3D_FLU * inv(T_FLU_to_RDF)   e.g.  [ 1 1 1 1]*T_FLU_to_RDF'
    
     
    %     points_3D_reported_world_RDF = T_FLU_to_RDF * vertcat(points_3D_reported, ones( 1 ,  size(points_3D_reported, 2) ) ) ;    
    world_to_camera_rotm  = world_to_camera_est_FLU(1:3 , 1:3) ;     world_to_camera_rotm_hist( ii_ , : , :) = world_to_camera_rotm ;
    world_to_camera_trans = world_to_camera_est_FLU(1:3 , 4) ;        world_to_camera_trans_hist( ii_ , : , :) = world_to_camera_trans ;
    
    if 0
        figure('Name','points_3D_reported_world_FLU');   hold on; grid on; axis equal; xlabel('x'); ylabel('y'); zlabel('z');
        plot3_rows(points_3D_reported_world_FLU, 'rx'); axis equal; grid on        
        plot3(0,0,0,'bo')        
        for ii_ = 1 : size(points_3D_reported_world_FLU,2)
            text( points_3D_reported_world_FLU(1,ii_) , points_3D_reported_world_FLU(2,ii_) , points_3D_reported_world_FLU(3,ii_) , sprintf('%d', ii_) );
        end
        draw_axes_direct(world_to_camera_est_FLU_rot, world_to_camera_est_FLU_t, '',1)
        
        % -- looks wrong ????
        figure('Name','points_3D_reported_local_FLU');   hold on; grid on; axis equal; xlabel('x'); ylabel('y'); zlabel('z');
        plot3_rows(points_3D_reported_local_FLU, 'rx');   
        plot3(0,0,0,'bo')           
        for ii_ = 1 : size(points_3D_reported_local_FLU,2)
            text( points_3D_reported_local_FLU(1,ii_) , points_3D_reported_local_FLU(2,ii_) , points_3D_reported_local_FLU(3,ii_) , sprintf('%d', ii_) );
        end        
    end
    
    
    display(world_to_local_FLU);
    world_to_local_FLU = [ [ world_to_camera_rotm' , world_to_camera_rotm' * world_to_camera_trans .* -1]  ;  [ 0 0 0 1 ] ]  ;
    display(world_to_local_FLU);      %   tr_invert(world_to_camera_est_FLU)
    
    points_3D_reported_local_FLU =  world_to_local_FLU * points_3D_reported_world_FLU ;
    points_3D_reported_local_RDF = T_FLU_to_RDF * points_3D_reported_local_FLU ;
    
    reprojected_ = camera_K_hom_RDF  *  points_3D_reported_local_RDF    ;
    
    reprojected__ = reprojected_ ;
    reprojected__(1,:)= reprojected_(1,:).* reprojected_(3,:).^-1  ;
    reprojected__(2,:)= reprojected_(2,:).* reprojected_(3,:).^-1  ;
    reprojected__(3,:)= reprojected_(3,:).* reprojected_(3,:).^-1  ;
    reprojected_errs( ii_ , : , : ) = abs(points_2D_reported - reprojected__(1:2,:) )  ;
    reprojected_errs_bad( ii_ , : )  =  reprojected__( 1 , : ) < 0  |  reprojected__( 2 , : ) < 0 ;
end
grid on; axis equal; xlabel('x'); ylabel('y'); zlabel('z');
pose_bad = sum(reprojected_errs_bad);


plot3_rows(points_3D_reported_world_FLU, 'rs');
for ii_ = 1 : size(points_3D_reported_world_FLU,2) 
    text( points_3D_reported_world_FLU(1,ii_) , points_3D_reported_world_FLU(2,ii_) , points_3D_reported_world_FLU(3,ii_) , sprintf('%d', ii_) );
end

% size(reprojected_errs_bad)
% points_2D
% reprojected__

%%
figure; hold on; grid on; axis equal; xlabel('x'); ylabel('y'); zlabel('z');
for ii_ = 1 :size(pose_bad,2)
    if pose_bad(ii_)        
        draw_axes_direct_c( squeeze(world_to_camera_rotm_hist(ii_,:,:)), world_to_camera_trans_hist(ii_,:,:)', 'BAD', 2,'k')
        plot3( world_to_camera_trans_hist(ii_,1,:),  world_to_camera_trans_hist(ii_,2,:),  world_to_camera_trans_hist(ii_,3,:),  'kd' , 'LineWidth', 3);
    else
        draw_axes_direct( squeeze(world_to_camera_rotm_hist(ii_,:,:)), world_to_camera_trans_hist(ii_,:,:)', 'GOOD', 1)
    end
end



%%
size(  squeeze(  reprojected_errs(:,1,:)   )  )

size(  squeeze(  sqrt(  reprojected_errs(:,1,:).^2 + reprojected_errs(:,2,:).^2  )  )  )

squeeze(  sqrt(  reprojected_errs(:,1,:).^2 + reprojected_errs(:,2,:).^2  )  )

squeeze(reprojected_errs(:,1,:)) < 0

reprojected_errs = abs( reprojected_errs );

reprojected__ < 0


%%
figure;hold on; grid on;
size(reprojected_errs)
for ii_ = 1:size(reprojected_errs,1) 
    % TODO - check that the points are in the right order 
    plot( ii_, sum(sum( squeeze( reprojected_errs( ii_ , : , : )  )  )) , 'rx')
end


%%
%  How many of the poses found are like the good pose?  
%  
% world_to_camera_trans_hist 
cam_605_good_trans = cam_605_good(1:3) ;
trans_errs = world_to_camera_trans_hist - repmat(cam_605_good_trans, size(world_to_camera_trans_hist,1) , 1 )  ;
trans_errs_rs = sqrt(trans_errs(:,1).^2+trans_errs(:,2).^2+trans_errs(:,3).^2)  ;
figure; plot(trans_errs_rs,'rx');
figure; hist(trans_errs_rs);
trans_errs_rs( trans_errs_rs< median(trans_errs_rs) )
figure; plot(  trans_errs_rs( trans_errs_rs< median(trans_errs_rs) )   , 'rx' );

%%
trans_errs_rs = sqrt( trans_errs(:,3).^2 )  ;
figure; plot(trans_errs_rs,'rx');
figure; hist(trans_errs_rs);
trans_errs_rs( trans_errs_rs< median(trans_errs_rs) )
figure; plot(  trans_errs_rs( trans_errs_rs< median(trans_errs_rs) )   , 'rx' );

%%
trans_errs_rs = sqrt( (:,3).^2 )  ;
figure; plot3(  trans_errs(:,1) , trans_errs(:,2) , trans_errs(:,3) , 'rx');  grid on; axis equal; xlabel('x'); ylabel('y'); zlabel('z');
figure; plot3(  abs(trans_errs(:,1)) , abs(trans_errs(:,2)) , abs(trans_errs(:,3)) , 'rx');  grid on; axis equal; xlabel('x'); ylabel('y'); zlabel('z');
figure; hist(trans_errs_rs);
trans_errs_rs( trans_errs_rs< median(trans_errs_rs) )
figure; plot(  trans_errs_rs( trans_errs_rs< median(trans_errs_rs) )   , 'rx' );

%%  
%         Find 2D-3D points which give problems

apoint = [2, -1.1, 0.4 ]';
world_to_local_FLU = [ [ world_to_camera_good_rotm' , world_to_camera_good_rotm' * world_to_camera_good_trans .* -1]  ;  [ 0 0 0 1 ] ]

points_3D_reported_world_FLU =  vertcat(points_3D_reported_FLU, ones( 1 ,  size(points_3D_reported_FLU, 2) ) );
camera_K_hom_RDF = [ camera_K , [ 0 0 0 ]'  ];

camera_K_hom_RDF * T_FLU_to_RDF * [ 1 0 0  1 ]'

reprojected_ = camera_K_hom_RDF * T_FLU_to_RDF * world_to_local_FLU * points_3D_reported_world_FLU

reprojected__ = reprojected_; 
reprojected__(1,:)= reprojected_(1,:).* reprojected_(3,:).^-1
reprojected__(2,:)= reprojected_(2,:).* reprojected_(3,:).^-1
reprojected__(3,:)= reprojected_(3,:).* reprojected_(3,:).^-1
errs = points_2D_reported - reprojected__(1:2,:)
size(errs)
errs_sq = sqrt( errs(1,:).^2 + errs(2,:).^2 )
figure; plot( errs_sq )
figure; hist( errs_sq )
var( errs_sq )
std( errs_sq )
median( errs_sq )
mode( errs_sq )
mean( errs_sq )
median( errs_sq ) + std( errs_sq )
mode( errs_sq ) + std( errs_sq )

errs_sq > median( errs_sq ) + std( errs_sq )




%%



cam_605_good = [...
    0.887598151824310  -1.97885166499638  0.957895776523009  -0.0318571289684177  0.187864426800859  0.248082165295458  0.949814360672122
    ];
apoint = [2, -1.1, 0.4 ]';
world_to_camera_good_rotm =  quat2rotm( [ cam_605_good(1,7) , cam_605_good(1,4:6) ] );
world_to_camera_good_trans = cam_605_good(1,1:3)';
figure;hold on; grid on; axis equal; xlabel('x'), ylabel('y'), zlabel('z');
draw_axes_direct(world_to_camera_good_rotm,world_to_camera_good_trans,'',0.2)
plot3( 0 , 0 , 0 , 'rx')
plot3( 2 , -3 , 0 , 'rx')
plot3_rows(points_3D_reported_world_FLU,'bo')
plot3(apoint(1),apoint(2),apoint(3),'bx')
% zlim( [ 0, 1.5 ] )

wc_ = vertcat (  horzcat( world_to_camera_good_rotm'  ,  world_to_camera_good_rotm' * ( -1*world_to_camera_good_trans )  )  ,  [ 0 0 0 1 ] )
wc_ = vertcat (  horzcat( world_to_camera_good_rotm  ,  world_to_camera_good_rotm * ( -1*world_to_camera_good_trans )  )  ,  [ 0 0 0 1 ] )
wc_ = vertcat (  horzcat( world_to_camera_good_rotm  ,  world_to_camera_good_trans  )  ,  [ 0 0 0 1 ] )

% world_to_camera_est_ = vertcat( horzcat( , )  ,  [  0  0  0  1  ]  )
%     reprojected_ = horzcat( camera_K , [ 0 ; 0 ; 0  ]) * world_to_camera_est_ * vertcat(points_3D_reported, ones( 1 ,  size(points_3D_reported, 2)  )  ) ;
    reprojected_ = horzcat( camera_K , [ 0 ; 0 ; 0  ]) * wc_ * vertcat(points_3D_reported_FLU, ones( 1 ,  size(points_3D_reported_FLU, 2)  )  ) ; 
    reprojected_ = horzcat( camera_K , [ 0 ; 0 ; 0  ]) * wc_ * vertcat(apoint, ones( 1 ,  size(apoint, 2)  )  ) ; 
    reprojected__ = reprojected_; 
    plot(reprojected__(1,:),reprojected__(2,:), 'gx')
    reprojected__(1,:)= reprojected_(1,:).* reprojected_(3,:).^-1
    reprojected__(2,:)= reprojected_(2,:).* reprojected_(3,:).^-1
    reprojected__(3,:)= reprojected_(3,:).* reprojected_(3,:).^-1
%     points_2D - reprojected__(1:2,:)
    figure;  hold on; grid on; axis equal; xlabel('x'), ylabel('y'), 
    plot(points_2D_reported(1,:),points_2D_reported(2,:), 'bo')
    plot(reprojected__(1,:),reprojected__(2,:), 'rx')


plot3(cam_605_good(:,1),cam_605_good(:,2),cam_605_good(:,3), 'ks');
grid on; axis equal; xlabel('x');ylabel('y');zlabel('z');

figure('Name','Estimates of Cam 605'); hold on; grid on; axis equal; xlabel('x');ylabel('y');zlabel('z');
plot3(estimates(:,1),estimates(:,2),estimates(:,3), 'rx');
plot3(cam_605_good(:,1),cam_605_good(:,2),cam_605_good(:,3), 'ks');





